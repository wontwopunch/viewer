const { spawn } = require('child_process');
const path = require('path');
const os = require('os');
const sharp = require('sharp');
const fs = require('fs');

/**
 * SVS ÌååÏùºÏùÑ ÌÉÄÏùºÎ°ú Î≥ÄÌôò
 * @param {string} inputPath - ÏûÖÎ†• SVS ÌååÏùº Í≤ΩÎ°ú
 * @param {string} outputDir - Ï∂úÎ†• ÌÉÄÏùº Ï†ÄÏû• ÎîîÎ†âÌÜ†Î¶¨
 * @param {number} tileSize - ÌÉÄÏùº ÌÅ¨Í∏∞ (Í∏∞Î≥∏Í∞í: 256)
 */
async function generateTiles(inputPath) {
    return new Promise((resolve, reject) => {
        console.log('üìÇ Ï≤òÎ¶¨Ìï† SVS ÌååÏùº:', inputPath);
        
        // CPU ÏΩîÏñ¥ ÏàòÎßåÌÅº ÏõåÏª§ ÏÉùÏÑ±
        const numWorkers = os.cpus().length;
        
        const pythonProcess = spawn('python3', [
            path.join(__dirname, 'slide_processor.py'),
            inputPath,
            'parallel',  // Î≥ëÎ†¨ Ï≤òÎ¶¨ Î™®Îìú
            numWorkers.toString()
        ]);

        let imageSize = null;
        let errorOutput = '';
        let stdoutData = '';

        pythonProcess.stdout.on('data', (data) => {
            const output = data.toString().trim();
            stdoutData += output + '\n';
            console.log('Python Ï∂úÎ†•:', output);
            
            // IMAGE_SIZE: Î¨∏ÏûêÏó¥ Ï∞æÍ∏∞
            const match = output.match(/IMAGE_SIZE:(\d+),(\d+)/);
            if (match) {
                const width = parseInt(match[1], 10);
                const height = parseInt(match[2], 10);
                if (!isNaN(width) && !isNaN(height)) {
                    imageSize = { width, height };
                    console.log('Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ ÌååÏã± ÏÑ±Í≥µ:', imageSize);
                }
            }
        });

        pythonProcess.stderr.on('data', (data) => {
            errorOutput += data.toString();
            console.error('Python Ïò§Î•ò:', data.toString().trim());
        });

        pythonProcess.on('close', (code) => {
            console.log('Python ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å:', {
                code,
                errorOutput,
                stdoutData,
                imageSize
            });

            if (code === 0 && imageSize) {
                resolve(imageSize);
            } else {
                reject(new Error('Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨ Ïã§Ìå®'));
            }
        });
    });
}

async function optimizeTile(tilePath) {
    await sharp(tilePath)
        .jpeg({
            quality: 80,
            progressive: true,
            force: true,
            optimizeScans: true
        })
        .toFile(tilePath + '.optimized');
    
    await fs.rename(tilePath + '.optimized', tilePath);
}

module.exports = { generateTiles };